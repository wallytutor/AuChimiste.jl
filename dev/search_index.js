var documenterSearchIndex = {"docs":
[{"location":"references/#References","page":"References","title":"References","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"W. D. Silva. AuChimiste.jl - A Julia package for chemical data and models manipulation (2025).\n\n\n\nC. J. Lawn. Principles of combustion engineering for boilers. Combustion treatise (Academic Press, 1987). Includes bibliography and index.\n\n\n\nK. S. Mujumdar, A. Arora and V. V. Ranade. Modeling of rotary cement kilns: applications to reduction in energy consumption. Industrial & Engineering Chemistry Research 45, 2315–2330 (2006).\n\n\n\nC. H. Shomate. A method for evaluating and correlating thermodynamic data. The Journal of Physical Chemistry 58, 368–372 (1954).\n\n\n\nH. Thunman and B. Leckner. Thermal conductivity of wood—models for different stages of combustion. Biomass and Bioenergy 23, 47–54 (2002).\n\n\n\nY. C. Guo, C. K. Chan and K. S. Lau. Numerical studies of pulverized coal combustion in a tubular coal combustor with slanted oxygen jet☆. Fuel 82, 893–907 (2003).\n\n\n\nH. Kramers and P. Croockewit. The passage of granular solids through inclined rotary kilns. Chemical Engineering Science 1, 259–265 (1952).\n\n\n\n","category":"page"},{"location":"tutorials/process-flowsheet/#Process-flowsheet","page":"Process flowsheet","title":"Process flowsheet","text":"","category":"section"},{"location":"tutorials/process-flowsheet/","page":"Process flowsheet","title":"Process flowsheet","text":"danger: Under development\nThis is a placeholder! Please, hold tight while the cook works!","category":"page"},{"location":"basics/kinetics/#Kinetics","page":"Kinetics","title":"Kinetics","text":"","category":"section"},{"location":"basics/kinetics/","page":"Kinetics","title":"Kinetics","text":"using AuChimiste","category":"page"},{"location":"basics/kinetics/","page":"Kinetics","title":"Kinetics","text":"add_load_path(\".\")\nload_path()","category":"page"},{"location":"basics/kinetics/","page":"Kinetics","title":"Kinetics","text":"reset_load_path()\nload_path()","category":"page"},{"location":"basics/hardcoded/#Hardcoded","page":"Hardcoded","title":"Hardcoded","text":"","category":"section"},{"location":"basics/hardcoded/","page":"Hardcoded","title":"Hardcoded","text":"using AuChimiste","category":"page"},{"location":"basics/hardcoded/#Mujumdar's-data","page":"Hardcoded","title":"Mujumdar's data","text":"","category":"section"},{"location":"basics/hardcoded/","page":"Hardcoded","title":"Hardcoded","text":"Mujumdar et al. [3] propose temperature dependent properties for flue gases to be used in the simulation of rotary kilns. Although these values are not recommended for practical purposes (especially because their thermal conducivity diverges from reasonable values above 1500 K), they are implemented for benchmarking against the reference literature model. Please, check AuChimiste.MujumdarFlueProperties for more details.","category":"page"},{"location":"basics/hardcoded/","page":"Hardcoded","title":"Hardcoded","text":"model = AuChimiste.MujumdarFlueProperties()\n\nc = specific_heat(model, T_NORMAL)\nk = thermal_conductivity(model, T_NORMAL)\nμ = viscosity(model, T_NORMAL)\n\nc, k, μ","category":"page"},{"location":"tutorials/simulating-kinetics/#Simulating-kinetics","page":"Simulating kinetics","title":"Simulating kinetics","text":"","category":"section"},{"location":"tutorials/simulating-kinetics/","page":"Simulating kinetics","title":"Simulating kinetics","text":"danger: Under development\nThis is a placeholder! Please, hold tight while the cook works!","category":"page"},{"location":"tutorials/oxide-systems/#Oxide-systems","page":"Oxide systems","title":"Oxide systems","text":"","category":"section"},{"location":"tutorials/oxide-systems/","page":"Oxide systems","title":"Oxide systems","text":"danger: Under development\nThis is a placeholder! Please, hold tight while the cook works!","category":"page"},{"location":"tutorials/plug-flow-reactor/#Plug-flow-reactor","page":"Plug-flow reactor","title":"Plug-flow reactor","text":"","category":"section"},{"location":"tutorials/plug-flow-reactor/","page":"Plug-flow reactor","title":"Plug-flow reactor","text":"danger: Under development\nThis is a placeholder! Please, hold tight while the cook works!","category":"page"},{"location":"basics/drummers/#Drummers","page":"Drummers","title":"Drummers","text":"","category":"section"},{"location":"basics/drummers/","page":"Drummers","title":"Drummers","text":"Drummers is how we call rotary drum models in AuChimiste. This more specialized set of functionalities can be used for process estimations and simulations, especially in the field of rotary kilns. In what follows we illustrate how to solve relevant equations and extract useful data with the provided functionalities.","category":"page"},{"location":"basics/drummers/","page":"Drummers","title":"Drummers","text":"using AuChimiste","category":"page"},{"location":"basics/drummers/#Solving-Kramers-equation","page":"Drummers","title":"Solving Kramers equation","text":"","category":"section"},{"location":"basics/drummers/","page":"Drummers","title":"Drummers","text":"The simplest way to get Kramers equation solved is by calling solve_kramers_stack","category":"page"},{"location":"basics/drummers/","page":"Drummers","title":"Drummers","text":"sol = solve_kramers_stack(;\n\tgrid   = [0, 13.7],\n\tradius = (_) -> 0.95,\n\tbeta   = (_) -> deg2rad(45.0),\n\tphiv   = (_) -> 2.88e-03,\n\th      = 0.001,\n\tω̇      = 0.05,\n\tα      = 0.0416\n)","category":"page"},{"location":"basics/drummers/","page":"Drummers","title":"Drummers","text":"Standardized plotting of DrumMediumKramersSolution bed profile is provided bellow. It supports normalization of axes throught keywords normz for axial coordinate and normh for bed depth.","category":"page"},{"location":"basics/drummers/","page":"Drummers","title":"Drummers","text":"fig, ax = AuChimiste.plot(sol)\nresize!(fig.scene, 650, 350)\nfig","category":"page"},{"location":"basics/drummers/","page":"Drummers","title":"Drummers","text":"grid = LinRange(0, 2, 50)\ngrid = vcat(grid, LinRange(1.7, 13.7, 12))\n\nsol = AuChimiste.solve_kramers_stack(;\n    grid   = grid,\n    radius = (_) -> 0.95,\n    beta   = (_) -> deg2rad(45.0),\n    phiv   = (_) -> 2.88e-03,\n    h      = 0.001,\n    ω̇      = 0.05,\n    α      = 0.0416\n)","category":"page"},{"location":"manual/users/#Users","page":"Users","title":"Users","text":"","category":"section"},{"location":"manual/users/","page":"Users","title":"Users","text":"CurrentModule = AuChimiste","category":"page"},{"location":"manual/users/#Elements","page":"Users","title":"Elements","text":"","category":"section"},{"location":"manual/users/","page":"Users","title":"Users","text":"AuChimiste.has_element\nAuChimiste.list_elements\nAuChimiste.reset_elements_table\nAuChimiste.add_element\nAuChimiste.add_isotope\nAuChimiste.atomic_mass\nAuChimiste.atomic_number\nAuChimiste.element_name\nAuChimiste.element\nAuChimiste.AtomicData","category":"page"},{"location":"manual/users/#AuChimiste.has_element","page":"Users","title":"AuChimiste.has_element","text":"has_element(e::Union{String, Symbol})\n\nCheck if element exists in list of atomic symbols.\n\n\n\n\n\n","category":"function"},{"location":"manual/users/#AuChimiste.list_elements","page":"Users","title":"AuChimiste.list_elements","text":"list_elements()\n\nProvides access to the list of atomic symbols.\n\n\n\n\n\n","category":"function"},{"location":"manual/users/#AuChimiste.reset_elements_table","page":"Users","title":"AuChimiste.reset_elements_table","text":"reset_elements_table()\n\nRemove any user-defined element.\n\n\n\n\n\n","category":"function"},{"location":"manual/users/#AuChimiste.add_element","page":"Users","title":"AuChimiste.add_element","text":"add_element(\n    symbol::String,\n    name::String,\n    number::Int64,\n    mass::Float64;\n    verbose = true\n)\n\nCreate chemical element name with associated symbol and atomic number. The value of atomic mass is given in grams per mole.\n\n\n\n\n\n","category":"function"},{"location":"manual/users/#AuChimiste.add_isotope","page":"Users","title":"AuChimiste.add_isotope","text":"add_isotope(\n    symbol::String,\n    mass::Float64;\n    name = nothing,\n    verbose = true\n)\n\nCreate isotope of element symbol with provided mass in grams per mole. If isothope is known by a specific name then use it instead of a name-mass naming scheme.\n\n\n\n\n\n","category":"function"},{"location":"manual/users/#AuChimiste.atomic_mass","page":"Users","title":"AuChimiste.atomic_mass","text":"atomic_mass(e::AtomicData)\natomic_mass(e::Union{String,Symbol})\n\nAtomic mass of element [g/mol].\n\n\n\n\n\n","category":"function"},{"location":"manual/users/#AuChimiste.atomic_number","page":"Users","title":"AuChimiste.atomic_number","text":"atomic_number(e::AtomicData)\natomic_number(e::Union{String,Symbol})\n\nAtomic number of element.\n\n\n\n\n\n","category":"function"},{"location":"manual/users/#AuChimiste.element_name","page":"Users","title":"AuChimiste.element_name","text":"element_name(e::AtomicData)\nelement_name(e::Union{String,Symbol})\n\nElement name from atomic symbol.\n\n\n\n\n\n","category":"function"},{"location":"manual/users/#AuChimiste.element","page":"Users","title":"AuChimiste.element","text":"element(e::Int64)\nelement(e::Union{String,Symbol})\n\nElement data from symbol or number.\n\n\n\n\n\n","category":"function"},{"location":"manual/users/#AuChimiste.AtomicData","page":"Users","title":"AuChimiste.AtomicData","text":"Represents a chemical element.\n\nFields\n\nsymbol::String: Element symbol in periodic table.\nname::String: Element name in periodic table.\nnumber::Int64: Element number in atomic units.\nmass::Float64: Element atomic mass [kg/kmol].\n\n\n\n\n\n","category":"type"},{"location":"manual/users/#Components","page":"Users","title":"Components","text":"","category":"section"},{"location":"manual/users/","page":"Users","title":"Users","text":"AuChimiste.ChemicalComponent\nAuChimiste.ComponentQuantity\n\nAuChimiste.component\nAuChimiste.stoichiometry\nAuChimiste.mole_proportions\nAuChimiste.mass_proportions\nAuChimiste.stoichiometry_map\nAuChimiste.mole_fractions_map\nAuChimiste.mass_fractions_map\nAuChimiste.quantity","category":"page"},{"location":"manual/users/#AuChimiste.ChemicalComponent","page":"Users","title":"AuChimiste.ChemicalComponent","text":"Represents a chemical component.\n\nFields\n\nelements::Vector{Symbol}: Array of component symbols.\ncoefficients::Vector{Float64}: Array of stoichiometric coefficients.\nmole_fractions::Vector{Float64}: Array of elemental mole fractions.\nmass_fractions::Vector{Float64}: Array of elemental mass fractions.\nmolar_mass::Float64: Molar mass of corresponding stoichiometry.\ncharge::Number: Global charge of component.\n\nNotes\n\nThis structure is not intended to be called as a constructor, safe use of its features require using component construction in combination with a composition specification.\nThe array of elements is unsorted when construction is performed through component but may get rearranged when composing new chemical components through supported algebra.\nCare must be taken when using molar_mass because it is given for the associated coefficients. That is always the expected behavior for molecular components but might not be the case in other applications (solids, solutions) when the mean molecular mass may be required.\n\n\n\n\n\n","category":"type"},{"location":"manual/users/#AuChimiste.ComponentQuantity","page":"Users","title":"AuChimiste.ComponentQuantity","text":"Represents a quantity of component.\n\nFields\n\nmass::Float64: Mass of component in arbitrary units.\ncomposition::AuChimiste.ChemicalComponent: Elemental composition of component.\n\n\n\n\n\n","category":"type"},{"location":"manual/users/#AuChimiste.component","page":"Users","title":"AuChimiste.component","text":"component(spec; kw...)\ncomponent(c::Composition{Stoichiometry}, charge)\ncomponent(c::Composition{MoleProportion}, charge)\ncomponent(c::Composition{MassProportion}, charge)\n\nCompile component from given composition specification. This function is a wrapper eliminating the need of calling stoichiometry, mole_proportions or mass_proportions directly. The value of spec must be the symbol representing one of their names.\n\n\n\n\n\n","category":"function"},{"location":"manual/users/#AuChimiste.stoichiometry","page":"Users","title":"AuChimiste.stoichiometry","text":"stoichiometry(; kw...)\n\nCreate composition based on elemental stoichiometry.\n\n\n\n\n\n","category":"function"},{"location":"manual/users/#AuChimiste.mole_proportions","page":"Users","title":"AuChimiste.mole_proportions","text":"mole_proportions(; scale = nothing, kw...)\n\nCreate composition based on relative molar proportions. The main different w.r.t. stoichiometry is the presence of a scaling factor to correct stoichiometry representation of the given composition.\n\n\n\n\n\n","category":"function"},{"location":"manual/users/#AuChimiste.mass_proportions","page":"Users","title":"AuChimiste.mass_proportions","text":"mass_proportions(; scale = nothing, kw...)\n\nCreate composition based on relative molar proportions. This is essentially the same thing as mole_proportions but in this case the element keywords are interpreted as being the mass proportions ofa associated elements.\n\n\n\n\n\n","category":"function"},{"location":"manual/users/#AuChimiste.stoichiometry_map","page":"Users","title":"AuChimiste.stoichiometry_map","text":"stoichiometry_map(c::ChemicalComponent)\n\nReturns component map of elemental stoichiometry.\n\n\n\n\n\n","category":"function"},{"location":"manual/users/#AuChimiste.mole_fractions_map","page":"Users","title":"AuChimiste.mole_fractions_map","text":"mole_fractions_map(c::ChemicalComponent)\n\nReturns component map of elemental mole fractions.\n\n\n\n\n\n","category":"function"},{"location":"manual/users/#AuChimiste.mass_fractions_map","page":"Users","title":"AuChimiste.mass_fractions_map","text":"mass_fractions_map(c::ChemicalComponent)\n\nReturns component map of elemental mass fractions.\n\n\n\n\n\n","category":"function"},{"location":"manual/users/#AuChimiste.quantity","page":"Users","title":"AuChimiste.quantity","text":"quantity(c::ChemicalComponent, mass::Float64)\nquantity(spec::Symbol, mass::Float64; kw...)\n\nCreates a quantity of chemical component. It may be explicit, i.e. by providing directly a ChemicalComponent, or implicit, that means, by creating a component directly from its chemical composition and specification method (wrapping component).\n\n\n\n\n\n","category":"function"},{"location":"manual/users/","page":"Users","title":"Users","text":"The following are not exported but is worth the end-user to known them:","category":"page"},{"location":"manual/users/","page":"Users","title":"Users","text":"AuChimiste.CompositionTypes\nAuChimiste.Composition","category":"page"},{"location":"manual/users/#AuChimiste.CompositionTypes","page":"Users","title":"AuChimiste.CompositionTypes","text":"Provides specification of allowed chemical composition types, which are used to declare compositions in terms of one of the following specification methods:\n\nStoichiometry: stoichiometric coefficients\nMoleProportion: molar proportions of elements\nMassProportion: mass proportions of elements\n\n\n\n\n\n","category":"type"},{"location":"manual/users/#AuChimiste.Composition","page":"Users","title":"AuChimiste.Composition","text":"Creates a typed composition specification for later construction of chemical component with component. Generally the end-user is not expected to use this structure directly, wrappers being provided by the available composition types through functions stoichiometry, mole_proportions, and mass_proportions.\n\nFields\n\ndata::NamedTuple: Tuple of elements and their amounts.\nscale::Pair{Symbol, <:Number}: Scaler element and coefficient for construction of component.\n\n\n\n\n\n","category":"type"},{"location":"manual/users/#Interfaces","page":"Users","title":"Interfaces","text":"","category":"section"},{"location":"manual/users/","page":"Users","title":"Users","text":"The following interfaces are provided as a centralization of names for the package. Generally these functions will take an object with the type for which they implement the quantity associated with their name, and other relevant parameters, such as temperature, pressure, and/or an array of mass fractions. In all cases values are expected to be returned in SI units, as documented by each function.","category":"page"},{"location":"manual/users/","page":"Users","title":"Users","text":"AuChimiste.density\nAuChimiste.specific_heat\nAuChimiste.enthalpy\nAuChimiste.entropy\nAuChimiste.thermal_conductivity\nAuChimiste.viscosity","category":"page"},{"location":"manual/users/#AuChimiste.density","page":"Users","title":"AuChimiste.density","text":"density(args...; kwargs...)\n\nEvaluation of the density of a substance. Its return value must be in kgcdotpm^-3.\n\n\n\n\n\n","category":"function"},{"location":"manual/users/#AuChimiste.specific_heat","page":"Users","title":"AuChimiste.specific_heat","text":"specific_heat(args...; kwargs...)\n\nEvaluation of the specific heat of a substance. Its return value must be in Jcdotpkg^-1cdotpK^-1.\n\n\n\n\n\n","category":"function"},{"location":"manual/users/#AuChimiste.enthalpy","page":"Users","title":"AuChimiste.enthalpy","text":"enthalpy(args...; kwargs...)\n\nEvaluation of the enthalpy of a substance. Its return value must be in Jcdotpkg^-1.\n\n\n\n\n\n","category":"function"},{"location":"manual/users/#AuChimiste.entropy","page":"Users","title":"AuChimiste.entropy","text":"entropy(args...; kwargs...)\n\nEvaluation of the entropy of a substance. Its return value must be in JcdotpK^-1.\n\n\n\n\n\n","category":"function"},{"location":"manual/users/#AuChimiste.thermal_conductivity","page":"Users","title":"AuChimiste.thermal_conductivity","text":"thermal_conductivity(args...; kwargs...)\n\nEvaluation of the thermal conductivity of a substance. Its return value must be in Wcdotpm^-1cdotpK^-1.\n\n\n\n\n\n","category":"function"},{"location":"manual/users/#AuChimiste.viscosity","page":"Users","title":"AuChimiste.viscosity","text":"viscosity(args...; kwargs...)\n\nEvaluation of the viscosity of a substance. Its return value must be in Pacdotps.\n\n\n\n\n\n","category":"function"},{"location":"manual/users/#Kinetics","page":"Users","title":"Kinetics","text":"","category":"section"},{"location":"manual/users/#Reactors","page":"Users","title":"Reactors","text":"","category":"section"},{"location":"manual/users/#Combustion","page":"Users","title":"Combustion","text":"","category":"section"},{"location":"manual/users/#Physical-Chemistry","page":"Users","title":"Physical Chemistry","text":"","category":"section"},{"location":"manual/users/","page":"Users","title":"Users","text":"AuChimiste.mean_molecular_mass_y\nAuChimiste.mean_molecular_mass_x\nAuChimiste.mean_molecular_mass\nAuChimiste.get_mole_fractions\nAuChimiste.get_mass_fractions","category":"page"},{"location":"manual/users/#AuChimiste.mean_molecular_mass_y","page":"Users","title":"AuChimiste.mean_molecular_mass_y","text":"mean_molecular_mass_y(Y, W)\n\nMean molecular mass computed from mass fractions.\n\n\n\n\n\n","category":"function"},{"location":"manual/users/#AuChimiste.mean_molecular_mass_x","page":"Users","title":"AuChimiste.mean_molecular_mass_x","text":"mean_molecular_mass_x(X, W)\n\nMean molecular mass computed from mole fractions.\n\n\n\n\n\n","category":"function"},{"location":"manual/users/#AuChimiste.mean_molecular_mass","page":"Users","title":"AuChimiste.mean_molecular_mass","text":"mean_molecular_mass(U, W; basis)\n\nCompute mean molecular mass based on given composition data.\n\n\n\n\n\n","category":"function"},{"location":"manual/users/#AuChimiste.get_mole_fractions","page":"Users","title":"AuChimiste.get_mole_fractions","text":"get_mole_fractions(Y, W)\nget_mole_fractions(Y, W, M)\n\nGet mole fractions from mass fractions.\n\n\n\n\n\n","category":"function"},{"location":"manual/users/#AuChimiste.get_mass_fractions","page":"Users","title":"AuChimiste.get_mass_fractions","text":"get_mass_fractions(X, W)\nget_mass_fractions(X, W, M)\n\nGet mass fractions from mole fractions.\n\n\n\n\n\n","category":"function"},{"location":"manual/users/#Thermodynamics","page":"Users","title":"Thermodynamics","text":"","category":"section"},{"location":"manual/users/","page":"Users","title":"Users","text":"AuChimiste.ThermoData\nAuChimiste.NASAThermo\nAuChimiste.ShomateThermo","category":"page"},{"location":"manual/users/#AuChimiste.ThermoData","page":"Users","title":"AuChimiste.ThermoData","text":"Generic storage of thermodynamic data with arbitrary sizes. This structure is not associated to any specific thermodynamic model/representation.\n\n\n\n\n\n","category":"type"},{"location":"manual/users/#AuChimiste.NASAThermo","page":"Users","title":"AuChimiste.NASAThermo","text":"Stores data for NASA-K parametrization with N temperature ranges.\n\n\n\n\n\n","category":"type"},{"location":"manual/users/#AuChimiste.ShomateThermo","page":"Users","title":"AuChimiste.ShomateThermo","text":"Stores data for Shomate parametrization with N temperature ranges. Model equations are as provided by [4].\n\n\n\n\n\n","category":"type"},{"location":"manual/users/#Hardcoded","page":"Users","title":"Hardcoded","text":"","category":"section"},{"location":"manual/users/","page":"Users","title":"Users","text":"AuChimiste.MujumdarFlueProperties","category":"page"},{"location":"manual/users/#AuChimiste.MujumdarFlueProperties","page":"Users","title":"AuChimiste.MujumdarFlueProperties","text":"Provides properties for flue gases as proposed by [3] for the simulation of rotary kilns. These properties are provided for benchmarking against reference model only and are not recommended to be used in simulations as they are known not to be very accurate and do not account for composition dependency. This type implements the traits of specific_heat, thermal_conductivity, and viscosity.\n\nThermal conductivity is extracted from [5]. The other properties are tracked back to [6]. Although the later also provides a model for thermal conductivity, it is not used by the authors of [3], probably due to its linear dependency on the temperature.\n\n\n\n\n\n","category":"type"},{"location":"manual/users/#Drummers","page":"Users","title":"Drummers","text":"","category":"section"},{"location":"manual/users/","page":"Users","title":"Users","text":"Kramers equation [7] describes the slope of bed height h over rotary kiln axis z, with discharge being given at z=0 where initial condition of granule size is expected to be provided. It accounts for rotation speed omega, volumetric flow rate Phi_v, kiln slope alpha, kiln internal radius R, and solids dynamic repose angle beta.  In Auchimiste its implementation is done by DrumMediumKramersChunk and is decomposed as provided in the following equation:","category":"page"},{"location":"manual/users/","page":"Users","title":"Users","text":"beginalign*\nfracdhdz = Aleft(2r-r^2right)^-frac32 - B\n6pt\nA = frac34fracPhi_vtanbetaomegapiR^3\n6pt\nB = fractanalphacosbeta\n6pt\nr = frachR\nendalign*","category":"page"},{"location":"manual/users/","page":"Users","title":"Users","text":"Because thermal effects may impact solids dynamic repose angle beta, it can be provided as a function of coordinate z (it is expected the user has solved the thermal model elsewhere and solution can be retrieved in terms of this coordinate); the same applies to volumetric flow Phi_v. For modeling transitions of radius, R is also to be provided as a function of z, but that must be done with care to provide a suitable discretization that is compatible with the provided transitions.","category":"page"},{"location":"manual/users/","page":"Users","title":"Users","text":"AuChimiste.DrumMediumKramersSolution\nAuChimiste.DrumMediumKramersChunk\nAuChimiste.solve_kramers_stack","category":"page"},{"location":"manual/users/#AuChimiste.DrumMediumKramersSolution","page":"Users","title":"AuChimiste.DrumMediumKramersSolution","text":"Geometric description of a rotary drum bed from Kramers equation solution.\n\nFields\n\nz::Vector{Float64}: Solution coordinates [m]\nh::Vector{Float64}: Solution bed height [m]\nR::Vector{Float64}: Internal drum radius [m]\nβ::Vector{Float64}: Local dynamic repose angle [°]\nϕ::Vector{Float64}: Local volume flow rate [m³/s]\nθ::Vector{Float64}: View angle from drum center [°]\nl::Vector{Float64}: Bed-freeboard cord length [m]\nA::Vector{Float64}: Local bed cross section area [m²]\nη::Vector{Float64}: Local loading based on height [-]\nΖ::Vector{Float64}: Coordinates of cell limits [m]\nτ::Vector{Float64}: Cumulative residence time of [min]\nΗ::Float64: Mean loading of kiln [%]\n\n\n\n\n\n","category":"type"},{"location":"manual/users/#AuChimiste.DrumMediumKramersChunk","page":"Users","title":"AuChimiste.DrumMediumKramersChunk","text":"Represents a chunk of a rotary drum bed model with Kramers equation.\n\n\n\n\n\n","category":"type"},{"location":"manual/users/#AuChimiste.solve_kramers_stack","page":"Users","title":"AuChimiste.solve_kramers_stack","text":"solve_kramers_stack(; kwargs...)\n\nSolves a rotary drum bed model with Kramers equation in a stack of chunks. The minimum set of parameters are the following:\n\ngrid: grid of coordinates given in meters; this must include both the   start and end points of the drum bed.\nradius: radius of the drum bed as a function of the coordinate z;   no checks are performed with respect to grid consistency.\nbeta: local dynamic repose angle as a function of the coordinate z;   this is expected to handle the effects of temperaraure and moisture as   treated by an external model.\nphiv: volumetric flow rate as a function of the coordinate z; this   is expected to handle the effects of temperature and moisture as treated   by an external model.\nh: initial bed height in meters at discharge position z=0.\nω̇: angular velocity of the drum in radians per second.\nα: drum inclination angle in radians.\n\n\n\n\n\n","category":"function"},{"location":"manual/users/#Database-parsing","page":"Users","title":"Database parsing","text":"","category":"section"},{"location":"manual/users/#Constants","page":"Users","title":"Constants","text":"","category":"section"},{"location":"manual/users/","page":"Users","title":"Users","text":"AuChimiste.ELECTRON_MASS\nAuChimiste.AVOGADRO\nAuChimiste.GAS_CONSTANT\nAuChimiste.STEFAN_BOLTZMANN\nAuChimiste.P_NORMAL\nAuChimiste.T_NORMAL\nAuChimiste.T_STANDARD","category":"page"},{"location":"manual/users/#AuChimiste.ELECTRON_MASS","page":"Users","title":"AuChimiste.ELECTRON_MASS","text":"Electron Mass m_e [9.109382915e-31 kg]\n\n\n\n\n\n","category":"constant"},{"location":"manual/users/#AuChimiste.AVOGADRO","page":"Users","title":"AuChimiste.AVOGADRO","text":"Avogadro's Number N_mathrmA [6.02214076e26 number/kmol]\n\n\n\n\n\n","category":"constant"},{"location":"manual/users/#AuChimiste.GAS_CONSTANT","page":"Users","title":"AuChimiste.GAS_CONSTANT","text":"Ideal gas constant R [8.31446261815324 J/(mol.K)].\n\n\n\n\n\n","category":"constant"},{"location":"manual/users/#AuChimiste.STEFAN_BOLTZMANN","page":"Users","title":"AuChimiste.STEFAN_BOLTZMANN","text":"Stefan-Boltzmann constant sigma [5.670374419e-8 W/(m².K⁴)].\n\n\n\n\n\n","category":"constant"},{"location":"manual/users/#AuChimiste.P_NORMAL","page":"Users","title":"AuChimiste.P_NORMAL","text":"Reference atmospheric pressure [101325.0 Pa].\n\n\n\n\n\n","category":"constant"},{"location":"manual/users/#AuChimiste.T_NORMAL","page":"Users","title":"AuChimiste.T_NORMAL","text":"Normal atmospheric temperature [273.15 K].\n\n\n\n\n\n","category":"constant"},{"location":"manual/users/#AuChimiste.T_STANDARD","page":"Users","title":"AuChimiste.T_STANDARD","text":"Standard atmospheric temperature [298.15 K].\n\n\n\n\n\n","category":"constant"},{"location":"manual/users/#Exception-types","page":"Users","title":"Exception types","text":"","category":"section"},{"location":"manual/users/","page":"Users","title":"Users","text":"Exception types are not exported as they are not intended for other purposes than handling errors inside AuChimiste. The documentation below is provided so that the end-user can better understand their occurrence for debugging their own code or reporting bugs:","category":"page"},{"location":"manual/users/","page":"Users","title":"Users","text":"AuChimiste.NoSuchElementError\nAuChimiste.NoIsotopeProvidedError\nAuChimiste.EmptyCompositionError\nAuChimiste.InvalidScalerError","category":"page"},{"location":"manual/users/#AuChimiste.NoSuchElementError","page":"Users","title":"AuChimiste.NoSuchElementError","text":"Element (or isotope) was not found in user database.\n\n\n\n\n\n","category":"type"},{"location":"manual/users/#AuChimiste.NoIsotopeProvidedError","page":"Users","title":"AuChimiste.NoIsotopeProvidedError","text":"Unstable elements do not provide atomic mass.\n\n\n\n\n\n","category":"type"},{"location":"manual/users/#AuChimiste.EmptyCompositionError","page":"Users","title":"AuChimiste.EmptyCompositionError","text":"A composition set is missing for the given component.\n\n\n\n\n\n","category":"type"},{"location":"manual/users/#AuChimiste.InvalidScalerError","page":"Users","title":"AuChimiste.InvalidScalerError","text":"The provided scaler targets an unspecified element.\n\n\n\n\n\n","category":"type"},{"location":"tutorials/adiabatic-flame/#Adiabatic-flame","page":"Adiabatic flame","title":"Adiabatic flame","text":"","category":"section"},{"location":"tutorials/adiabatic-flame/","page":"Adiabatic flame","title":"Adiabatic flame","text":"danger: Under development\nThis is a placeholder! Please, hold tight while the cook works!","category":"page"},{"location":"tutorials/countercurrent-reactors/#Countercurrent-reactors","page":"Countercurrent reactors","title":"Countercurrent reactors","text":"","category":"section"},{"location":"tutorials/countercurrent-reactors/","page":"Countercurrent reactors","title":"Countercurrent reactors","text":"danger: Under development\nThis is a placeholder! Please, hold tight while the cook works!","category":"page"},{"location":"tutorials/empirical-fuel-for-cfd/#Empirical-fuel-for-CFD","page":"Empirical fuel for CFD","title":"Empirical fuel for CFD","text":"","category":"section"},{"location":"tutorials/empirical-fuel-for-cfd/","page":"Empirical fuel for CFD","title":"Empirical fuel for CFD","text":"danger: Under development\nThis is a placeholder! Please, hold tight while the cook works!","category":"page"},{"location":"tutorials/fluid-properties/#Fluid-properties","page":"Fluid properties","title":"Fluid properties","text":"","category":"section"},{"location":"tutorials/fluid-properties/","page":"Fluid properties","title":"Fluid properties","text":"danger: Under development\nThis is a placeholder! Please, hold tight while the cook works!","category":"page"},{"location":"basics/elements/#Elements","page":"Elements","title":"Elements","text":"","category":"section"},{"location":"basics/elements/","page":"Elements","title":"Elements","text":"Let's start by a global import; everything that is intended to be accessible to the end user is found here:","category":"page"},{"location":"basics/elements/","page":"Elements","title":"Elements","text":"using AuChimiste","category":"page"},{"location":"basics/elements/#Elements-database","page":"Elements","title":"Elements database","text":"","category":"section"},{"location":"basics/elements/","page":"Elements","title":"Elements","text":"A built-in elements database is provided by ChemicalElements, which is the base building block of AuChimiste. It is an extremely simple module and below we go through the whole of its exposed functionalities in just a few lines of code","category":"page"},{"location":"basics/elements/","page":"Elements","title":"Elements","text":"note: Database extent\nIn general you only need to worry about using ChemicalElements directly if your calculations require isotopes to be added. The default table of elements provides access only to stable elements.","category":"page"},{"location":"basics/elements/","page":"Elements","title":"Elements","text":"You can get a list of available atomic symbols with list_elements. Suppose you want to check if deuterium D is present in the list, you can use its symbol for inspection:","category":"page"},{"location":"basics/elements/","page":"Elements","title":"Elements","text":":D ∈ list_elements()","category":"page"},{"location":"basics/elements/","page":"Elements","title":"Elements","text":"Since it is not present but your calculations require this isotope, you feed the database with add_element; you also decide to add tritium. In fact add_element will not fail if the element exists, but issue a warning. You can try adding an existing element to see what happens:","category":"page"},{"location":"basics/elements/","page":"Elements","title":"Elements","text":"add_element(\"D\", \"deuterium\", 1, 2.0141017781)\nadd_element(\"Tr\", \"tritium\", 1, 3.0160492820)\nadd_element(\"H\", \"hydrogen\", 1, 1.008)","category":"page"},{"location":"basics/elements/","page":"Elements","title":"Elements","text":"If you wish to get back to the standard data you can do so with reset_elements_table. Notice below that deuterium mass is no longer available.","category":"page"},{"location":"basics/elements/","page":"Elements","title":"Elements","text":"reset_elements_table()\nhas_element(:D)","category":"page"},{"location":"basics/elements/#Element-data-retrieval","page":"Elements","title":"Element data retrieval","text":"","category":"section"},{"location":"basics/elements/","page":"Elements","title":"Elements","text":"It is possible to retrieve the atomic_mass. Other data retrieval functions include atomic_number and element_name. All of these work with both string and symbols.","category":"page"},{"location":"basics/elements/","page":"Elements","title":"Elements","text":"atomic_mass(:C), atomic_number(:C), element_name(:C)","category":"page"},{"location":"basics/elements/","page":"Elements","title":"Elements","text":"Getting the whole element data can be achieved at once as follows:","category":"page"},{"location":"basics/elements/","page":"Elements","title":"Elements","text":"element(:Cl)","category":"page"},{"location":"basics/elements/","page":"Elements","title":"Elements","text":"In this case is also possible to query the data through the atomic number:","category":"page"},{"location":"basics/elements/","page":"Elements","title":"Elements","text":"element(26)","category":"page"},{"location":"basics/elements/","page":"Elements","title":"Elements","text":"On the other hand atomic masses of unstable elements are not accessible:","category":"page"},{"location":"basics/elements/","page":"Elements","title":"Elements","text":"try atomic_mass(:Po) catch e; @error(e) end","category":"page"},{"location":"basics/elements/","page":"Elements","title":"Elements","text":"To have an unstable element listed, you need to add_isotope before. For instance, let's add Po-187 to the database.","category":"page"},{"location":"basics/elements/","page":"Elements","title":"Elements","text":"add_isotope(:Po, 187.003030)","category":"page"},{"location":"tutorials/chain-of-reactors/#Chain-of-reactors","page":"Chain of reactors","title":"Chain of reactors","text":"","category":"section"},{"location":"tutorials/chain-of-reactors/","page":"Chain of reactors","title":"Chain of reactors","text":"danger: Under development\nThis is a placeholder! Please, hold tight while the cook works!","category":"page"},{"location":"tutorials/solid-solution/#Solid-solution","page":"Solid solution","title":"Solid solution","text":"","category":"section"},{"location":"tutorials/solid-solution/","page":"Solid solution","title":"Solid solution","text":"danger: Under development\nThis is a placeholder! Please, hold tight while the cook works!","category":"page"},{"location":"basics/components/#Components","page":"Components","title":"Components","text":"","category":"section"},{"location":"basics/components/","page":"Components","title":"Components","text":"using AuChimiste","category":"page"},{"location":"basics/components/#Creating-components","page":"Components","title":"Creating components","text":"","category":"section"},{"location":"basics/components/","page":"Components","title":"Components","text":"Component creation is a trivial task with AuChimiste. All you need to do is call component with one of the available composition specification methods and a list of keyword arguments representing the element amounts to use. For instance, to create aluminum oxide from its stoichiometry one does:","category":"page"},{"location":"basics/components/","page":"Components","title":"Components","text":"A = component(:stoichiometry; Al=2, O=3)","category":"page"},{"location":"basics/components/","page":"Components","title":"Components","text":"The above is a syntactic sugar to providing a stoichiometry as argument. Please notice that this form requires the overall charge of the component to be specified.","category":"page"},{"location":"basics/components/","page":"Components","title":"Components","text":"A = component(stoichiometry(Al=2, O=3), 0)","category":"page"},{"location":"basics/components/","page":"Components","title":"Components","text":"The other composition specification methods are mass_proportions and mole_proportions. Let' s see their use in a more elaborate example with naphthalene C_10H_8:","category":"page"},{"location":"basics/components/","page":"Components","title":"Components","text":"naphtalene = component(:stoichiometry; C=10, H=8)","category":"page"},{"location":"basics/components/","page":"Components","title":"Components","text":"So far nothing new. We can use mass_fractions_map and mole_fractions_map to retrieve the named-tuples of compositions in the units provided by these functions:","category":"page"},{"location":"basics/components/","page":"Components","title":"Components","text":"Y = mass_fractions_map(naphtalene)\nX = mole_fractions_map(naphtalene)\nY, X","category":"page"},{"location":"basics/components/","page":"Components","title":"Components","text":"Using the mass fractions Y one can create the equivalent compound from this sort of input. Notice here that a scale is provided to enforce the stoichiometric coefficient of carbon in the species (there is no way to infer it simply from elemental mass fractions).","category":"page"},{"location":"basics/components/","page":"Components","title":"Components","text":"m_y = component(:mass_proportions; Y..., scale=:C=>10)","category":"page"},{"location":"basics/components/","page":"Components","title":"Components","text":"The same can be done using mole fractions, as follows:","category":"page"},{"location":"basics/components/","page":"Components","title":"Components","text":"m_x = component(:mole_proportions; X..., scale=:C=>10)","category":"page"},{"location":"basics/components/","page":"Components","title":"Components","text":"If scaling is not provided, the default behavior is enforced, applying unit content to the first element provided in the composition tuple. Notice that these constructors do not sort arguments. This behavior is intended so that compounds can be easily understood by the user in the case a standard formula format exists (as for the oxides above).","category":"page"},{"location":"basics/components/","page":"Components","title":"Components","text":"component(:mole_proportions; X...)","category":"page"},{"location":"basics/components/","page":"Components","title":"Components","text":"Finally, by proportions instead of fractions in the name of the composition specification methods we mean that internal normalization is performed. That might be useful, for instance, for reverse-engineering a compound formula from an analysis report.","category":"page"},{"location":"basics/components/","page":"Components","title":"Components","text":"Often in the field of combustion of heavy-fuel oils one is confronted with empirical fuel compositions given in mass percentages. Assume the following composition; playing with the scaling factor an engineer could infer a candidate composition and identify the family of the fuel [2].","category":"page"},{"location":"basics/components/","page":"Components","title":"Components","text":"component(:mass_proportions; C = 93.2, H = 6.3, O = 0.3, scale=:C=>10)","category":"page"},{"location":"basics/components/#Combining-components","page":"Components","title":"Combining components","text":"","category":"section"},{"location":"basics/components/","page":"Components","title":"Components","text":"Some algebraic manipulation is also possible with AuChimiste.ChemicalComponent instances. Let's see a practical case from cement industry, where compositions are often expressed with a jargon that makes use of multiple of component oxides to represent complex phases such as C_12A_7.","category":"page"},{"location":"basics/components/","page":"Components","title":"Components","text":"Below we create a component C for calcium oxide (notice that C here was chosen as per industry jargon, it has nothing to do with carbon) and create the multiples of the base oxides (using an extension of Base.:*) before combining them through addition (again, by extending Base.:+ operator).","category":"page"},{"location":"basics/components/","page":"Components","title":"Components","text":"A = component(:stoichiometry; Al=2, O=3)\nC = component(:stoichiometry; Ca=1, O=1)\n\nC12A7 = 12C + 7A","category":"page"},{"location":"basics/components/","page":"Components","title":"Components","text":"warning: Meaning of operations\nAll operations performed over AuChimiste.ChemicalComponent instances are defined on stoichiometric coefficients, i.e. the scaling provided by multiplication acts directly on those coefficients, while combining will add coefficients for corresponding elements.","category":"page"},{"location":"basics/components/","page":"Components","title":"Components","text":"Subtraction operation (Base.:-) is also possible, but there are many conditions under which it could fail and it was chosen by design that a negative composition should return the mass imbalance instead, i.e. what lacks in A to be subtracted C and still return a valid component.","category":"page"},{"location":"basics/components/","page":"Components","title":"Components","text":"A = component(:stoichiometry; Al=2, O=3)\nC = component(:stoichiometry; Ca=1, O=1)\nA - C","category":"page"},{"location":"basics/components/","page":"Components","title":"Components","text":"On the other hand, if the left component has enough of what is being subtracted by the right component, then the actual resulting component is returned:","category":"page"},{"location":"basics/components/","page":"Components","title":"Components","text":"C12A7 - C","category":"page"},{"location":"basics/components/#Charged-components","page":"Components","title":"Charged components","text":"","category":"section"},{"location":"basics/components/","page":"Components","title":"Components","text":"For the sake of generality, charged components are also supported. This is required so that ions can be considered in reactions. For instance, to create a sodium chloride formula one can proceed as follows:","category":"page"},{"location":"basics/components/","page":"Components","title":"Components","text":"Na₊ = component(:stoichiometry; charge=+1, Na=1)\nCl₋ = component(:stoichiometry; charge=-1, Cl=1)\n\nNaCl = Na₊ + Cl₋","category":"page"},{"location":"basics/components/","page":"Components","title":"Components","text":"The user must be aware of a few caveats; first, molecular mass is not corrected for the missing/extra electrons. Electron and mass balance are handled separately, as this makes more sense from a physical standpoint. Scaling of a component also scales its charge. This is required for proper balance of chemical equations.","category":"page"},{"location":"basics/components/","page":"Components","title":"Components","text":"(3Na₊).charge","category":"page"},{"location":"basics/components/","page":"Components","title":"Components","text":"So the formation of calcium hydroxide can be stated as:","category":"page"},{"location":"basics/components/","page":"Components","title":"Components","text":"Ca₊₂ = component(:stoichiometry; charge=+2, Ca=1)\nOH₋ = component(:stoichiometry; charge=-1, O=1, H=1)\n\nCa₊₂ + 2OH₋","category":"page"},{"location":"basics/components/#Quantities-of-matter","page":"Components","title":"Quantities of matter","text":"","category":"section"},{"location":"basics/components/","page":"Components","title":"Components","text":"An arbitrary amount of matter can be constructed with quantity. The resulting AuChimiste.ComponentQuantity object supports both scaling (multiplication) and additive (summation) operations. A trivial example would be:","category":"page"},{"location":"basics/components/","page":"Components","title":"Components","text":"3quantity(A, 1.0)","category":"page"},{"location":"basics/components/","page":"Components","title":"Components","text":"warning: Meaning of operations\nOn the other hand, operations performed on AuChimiste.ComponentQuantity entities are scaled by the elemental mass fractions. That is mostly intuitive in the context of application of this structure.","category":"page"},{"location":"basics/components/","page":"Components","title":"Components","text":"Well, there is nothing special there, the mass was scaled by three with no composition change. The next example is maybe more instructive: we mix one mole of A with one mole of C by providing their molar masses as the mass of each component. This is interesting because one can quickly verify the correctness of the results.","category":"page"},{"location":"basics/components/","page":"Components","title":"Components","text":"ma = quantity(A, 0.001A.molar_mass)\nmc = quantity(C, 0.001C.molar_mass)\nma + mc","category":"page"},{"location":"basics/components/","page":"Components","title":"Components","text":"Because in many situations one may be interested in mixing quantities directly, a wrapper is provided for eliminating the need of and explicit creation of a component.","category":"page"},{"location":"basics/components/","page":"Components","title":"Components","text":"ma = quantity(:stoichiometry, 1.0; Al=2, O=3)\nmc = quantity(:stoichiometry, 1.0; Ca=1, O=1)\nma + mc","category":"page"},{"location":"basics/components/","page":"Components","title":"Components","text":"warning: Charge operations\nOperations on electrical charges of quantities of matter are currently not supported. This functionality was initially conceived for balancing macroscopic amounts of matter and may in the future be extended for ionic substances.","category":"page"},{"location":"manual/development/#Development","page":"Development","title":"Development","text":"","category":"section"},{"location":"manual/development/","page":"Development","title":"Development","text":"CurrentModule = AuChimiste","category":"page"},{"location":"manual/development/","page":"Development","title":"Development","text":"This part of the documentation is intended for developers. It might also be useful for standard users trying to understand bugs or propose features. AuChimiste aims at having 100% first-level entities documented so that design features can be understood in the future.","category":"page"},{"location":"manual/development/#General-guidelines","page":"Development","title":"General guidelines","text":"","category":"section"},{"location":"manual/development/","page":"Development","title":"Development","text":"Code written, code documented, code tested.\nCode lines make 72 characters, never more than 79.\nCode is not cluttered and comments are minimal.\nCode abuses of multiple dispatch if needed.\nCode is Julia, nothing else, no wrappers allowed.","category":"page"},{"location":"manual/development/","page":"Development","title":"Development","text":"By the above we mean that development must integrate simultaneous functionality development, documentation, and testing. Good formatting and readability are expected. Pull requests not meeting these criteria will be systematically refused.","category":"page"},{"location":"manual/development/","page":"Development","title":"Development","text":"Regarding the style, we make two major break-ups with standard Julia guidelines:","category":"page"},{"location":"manual/development/","page":"Development","title":"Development","text":"First, functions and constant names have words separated by underscores, following Python-style. We hope in the future this more reasonable/human readable naming scheme will be accepted in Julia community. Other naming schemes such as the use of Pascal-case in structures are followed.\nThe second point is that library functions are strictly declared through the use of function keyword, even for trivial functions. While pure-functional style of function declaration is fine in applications, being able to fold code and hide any implementation details when reviewing structure is an appreciated feature by the core developers.","category":"page"},{"location":"manual/development/#Internals","page":"Development","title":"Internals","text":"","category":"section"},{"location":"manual/development/","page":"Development","title":"Development","text":"Chemical Elements","category":"page"},{"location":"manual/development/","page":"Development","title":"Development","text":"AuChimiste.ELEMENTS\nAuChimiste.USER_ELEMENTS\nAuChimiste.handle_element\nAuChimiste.find_element","category":"page"},{"location":"manual/development/#AuChimiste.ELEMENTS","page":"Development","title":"AuChimiste.ELEMENTS","text":"Default table of elements. This table should not be modified by any internal or external operation. Although it is declared as constant, that means simply that ELEMENTS cannot be attributed to, but the resulting dictionary may be accidentally modified.\n\n\n\n\n\n","category":"constant"},{"location":"manual/development/#AuChimiste.USER_ELEMENTS","page":"Development","title":"AuChimiste.USER_ELEMENTS","text":"Runtime modifiable table of elements. All operations must be performed in this table so that user-defined elements (isothopes) can be made available. This is the table to be internally modified and read by all functions requiring to access data.\n\n\n\n\n\n","category":"constant"},{"location":"manual/development/#AuChimiste.handle_element","page":"Development","title":"AuChimiste.handle_element","text":"handle_element(f, e)\n\nApplies function f to element e. This function wraps the call of f with a standardized error-handling used accross the module.\n\n\n\n\n\n","category":"function"},{"location":"manual/development/#AuChimiste.find_element","page":"Development","title":"AuChimiste.find_element","text":"find_element(v, prop)\n\nFind element for which property prop has value v.\n\n\n\n\n\n","category":"function"},{"location":"manual/development/","page":"Development","title":"Development","text":"Database parsing","category":"page"},{"location":"manual/development/","page":"Development","title":"Development","text":"AuChimiste.DATA_PATH\nAuChimiste.USER_PATH","category":"page"},{"location":"manual/development/#AuChimiste.DATA_PATH","page":"Development","title":"AuChimiste.DATA_PATH","text":"Default search path for thermodynamics and kinetics databases.\n\n\n\n\n\n","category":"constant"},{"location":"manual/development/#AuChimiste.USER_PATH","page":"Development","title":"AuChimiste.USER_PATH","text":"List of search paths for thermodynamics and kinetics databases.\n\n\n\n\n\n","category":"constant"},{"location":"#AuChimiste-Toolbox","page":"AuChimiste Toolbox","title":"AuChimiste Toolbox","text":"","category":"section"},{"location":"","page":"AuChimiste Toolbox","title":"AuChimiste Toolbox","text":"From elements to plain gold (and kinetics), all in plain Julia.","category":"page"},{"location":"","page":"AuChimiste Toolbox","title":"AuChimiste Toolbox","text":"AuChimiste is an alchimiste wordplay meaning to the chemist in French.","category":"page"},{"location":"","page":"AuChimiste Toolbox","title":"AuChimiste Toolbox","text":"Please check the Getting Started (and the whole suit) in the sidebar if it is your first time here.","category":"page"},{"location":"","page":"AuChimiste Toolbox","title":"AuChimiste Toolbox","text":"If this module was useful in your work, please consider citing us [1].","category":"page"},{"location":"#Project-goals-and-status","page":"AuChimiste Toolbox","title":"Project goals and status","text":"","category":"section"},{"location":"","page":"AuChimiste Toolbox","title":"AuChimiste Toolbox","text":"One toolbox, all chemistry.","category":"page"},{"location":"","page":"AuChimiste Toolbox","title":"AuChimiste Toolbox","text":"Provide chemical elements with symbolic support and built-in data; utilities are expected to allow users to define their own elements (e.g. isotopes) and retrieve data.\nBy making use of chemical elements we provide chemical components. We call them this way because it is intended to include anything from species, compounds, solids, etc., so no other name suited its ends. Components include:\nProvide creation of arbitrary compounds from mass or molar composition (try to understand this term in the broader sense) with the other composition being computed, i.e. if mass fractions were provided, the compound can access its molar composition, and molecular mass.\nArithmetic of compounds to create complex compositions and manipulation of amounts of matter. This sort of functionality is aimed at computing mixtures for experiments, validation of chemical reactions mass balance, or simply creating new compounds expressed in terms of components, as is often the case in intermetallics or complex oxide systems.\nWIP: Putting chemical components together one can express reactions; with reactions we open the gates to chemical kinetics. This introduces the expression of symbolic kinetics for ease of integration in reactor models. It provides parsing of Cantera mechanism and reusable code generation for simulating mechanisms.\nWIP: Chemical kinetics provides the basis for the construction of reactor models in chemical reactors. They are built upon ModelingToolkit blocks and allows for chains of reactors, plug-flow reactors,...\nWIP: Supporting the above one needs basic physical-chemistry definitions, which provides the required closure models for the different models, and combustion-chemistry a specialized set of functionalities for the analysis and simulation of combustion systems.\nWIP: Going one step further, we implement chemical thermodynamics utilities that make use of some of the above to provide chemical thermodynamics computations, with focus in phase equilibria and CALPHAD approaches.\nWIP: For all types for which it applies, provide recipes for LaTeX representation of entities, so that report generation can be automated.","category":"page"},{"location":"#Related-tools","page":"AuChimiste Toolbox","title":"Related tools","text":"","category":"section"},{"location":"","page":"AuChimiste Toolbox","title":"AuChimiste Toolbox","text":"Searching for chemistry, kinetics, or thermodynamics in Julia Packages does not lead to any convincing package or ecosystem in competition with what is aimed here, justifying its existence. ","category":"page"},{"location":"","page":"AuChimiste Toolbox","title":"AuChimiste Toolbox","text":"Some clarifications regarding the design choices of this package:","category":"page"},{"location":"","page":"AuChimiste Toolbox","title":"AuChimiste Toolbox","text":"It does not intend to replace Cantera, but to provide similar functionality in a algorithmic-differentiable way for some of its applications. The main difference here is the focus at supporting user-defined models.\nIt also does not compete with pyJac as all code generation is aimed to be plain Julia. While pyJac uses analytically derived formulas for jacobian matrix evaluation, our intent here is to let the user chose how the AD code will be employed in their simulations.\nRegarding Catalyst.jl, our goal is not to analyse kinetics in the same sense, but to use mechanisms (with thermochemistry integrated, what lacks there) in larger simulations.","category":"page"},{"location":"tutorials/kinetics-from-scratch/#Kinetics-from-scratch","page":"Kinetics from scratch","title":"Kinetics from scratch","text":"","category":"section"},{"location":"tutorials/kinetics-from-scratch/","page":"Kinetics from scratch","title":"Kinetics from scratch","text":"danger: Under development\nThis is a placeholder! Please, hold tight while the cook works!","category":"page"}]
}
